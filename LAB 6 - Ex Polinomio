#ifndef POLINOMIO_H
#define POLINOMIO_H

#include <iostream>
#include <vector>
using namespace std;

class Polinomio {
private:
    vector<double> coef;

public:
    Polinomio(int grau = 0);
    friend istream& operator>>(istream& in, Polinomio& p);
    friend ostream& operator<<(ostream& out, const Polinomio& p);
    Polinomio operator+(const Polinomio& other);
    Polinomio operator-(const Polinomio& other);
};

#endif



#include "Polinomio.h"

Polinomio::Polinomio(int grau) : coef(grau + 1, 0) {}

istream& operator>>(istream& in, Polinomio& p) {
    for (int i = p.coef.size() - 1; i >= 0; --i) {
        cout << "Coeficiente de x^" << i << ": ";
        in >> p.coef[i];
    }
    return in;
}

ostream& operator<<(ostream& out, const Polinomio& p) {
    for (int i = p.coef.size() - 1; i >= 0; --i) {
        if (p.coef[i] != 0) {
            out << (p.coef[i] > 0 && i != p.coef.size() - 1 ? "+" : "") << p.coef[i];
            if (i > 0) out << "x^" << i << " ";
        }
    }
    return out;
}

Polinomio Polinomio::operator+(const Polinomio& other) {
    int maxGrau = max(coef.size(), other.coef.size());
    Polinomio resultado(maxGrau - 1);
    for (int i = 0; i < maxGrau; ++i) {
        double a = i < coef.size() ? coef[i] : 0;
        double b = i < other.coef.size() ? other.coef[i] : 0;
        resultado.coef[i] = a + b;
    }
    return resultado;
}

Polinomio Polinomio::operator-(const Polinomio& other) {
    int maxGrau = max(coef.size(), other.coef.size());
    Polinomio resultado(maxGrau - 1);
    for (int i = 0; i < maxGrau; ++i) {
        double a = i < coef.size() ? coef[i] : 0;
        double b = i < other.coef.size() ? other.coef[i] : 0;
        resultado.coef[i] = a - b;
    }
    return resultado;
}



#include "Polinomio.h"

int main() {
    Polinomio p1(2), p2(2);
    cout << "Digite o primeiro polinômio:\n";
    cin >> p1;
    cout << "Digite o segundo polinômio:\n";
    cin >> p2;

    Polinomio soma = p1 + p2;
    Polinomio sub = p1 - p2;

    cout << "Soma: " << soma << endl;
    cout << "Subtração: " << sub << endl;

    return 0;
}
